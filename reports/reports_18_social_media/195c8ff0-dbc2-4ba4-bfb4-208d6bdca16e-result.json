{"name": "test_social_media_update_and_remove", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=126.0.6478.63); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7F3D53E32+31618]\n\t(No symbol) [0x00007FF7F3CCB099]\n\t(No symbol) [0x00007FF7F3B8888A]\n\t(No symbol) [0x00007FF7F3B8E6BE]\n\t(No symbol) [0x00007FF7F3B91011]\n\t(No symbol) [0x00007FF7F3B910B0]\n\t(No symbol) [0x00007FF7F3BD29E5]\n\t(No symbol) [0x00007FF7F3BFD10A]\n\t(No symbol) [0x00007FF7F3BCBBA6]\n\t(No symbol) [0x00007FF7F3BFD320]\n\t(No symbol) [0x00007FF7F3C1CA80]\n\t(No symbol) [0x00007FF7F3BFCEB3]\n\t(No symbol) [0x00007FF7F3BCA46B]\n\t(No symbol) [0x00007FF7F3BCB001]\n\tGetHandleVerifier [0x00007FF7F4059FFD+3202381]\n\tGetHandleVerifier [0x00007FF7F40A6A1D+3516269]\n\tGetHandleVerifier [0x00007FF7F409C490+3473888]\n\tGetHandleVerifier [0x00007FF7F3E05D36+760454]\n\t(No symbol) [0x00007FF7F3CD6B3F]\n\t(No symbol) [0x00007FF7F3CD1CD4]\n\t(No symbol) [0x00007FF7F3CD1E62]\n\t(No symbol) [0x00007FF7F3CC120F]\n\tBaseThreadInitThunk [0x00007FFB806E7344+20]\n\tRtlUserThreadStart [0x00007FFB80E5CC91+33]", "trace": "self = <test_18_social_media.TestSocialMedia object at 0x0000017A32BDC6B0>\n\n    def test_social_media_update_and_remove(self):\n>       self.prc_social_media()\n\ntest_18_social_media.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_18_social_media.py:36: in prc_social_media\n    Driver.wait(self.driver, By.XPATH, \"//button[@data-dismiss='toast']\", \"click\").click()\n..\\utils\\Driver.py:16: in wait\n    return WebDriverWait(driver, timeout).until(ec.element_to_be_clickable((selector, element)))\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:365: in _predicate\n    if element and element.is_enabled():\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:192: in is_enabled\n    return self._execute(Command.IS_ELEMENT_ENABLED)[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017A331C3E00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF7F3CC120F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB806E7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFB80E5CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=126.0.6478.63); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7F3D53E32+31618]\nE       \t(No symbol) [0x00007FF7F3CCB099]\nE       \t(No symbol) [0x00007FF7F3B8888A]\nE       \t(No symbol) [0x00007FF7F3B8E6BE]\nE       \t(No symbol) [0x00007FF7F3B91011]\nE       \t(No symbol) [0x00007FF7F3B910B0]\nE       \t(No symbol) [0x00007FF7F3BD29E5]\nE       \t(No symbol) [0x00007FF7F3BFD10A]\nE       \t(No symbol) [0x00007FF7F3BCBBA6]\nE       \t(No symbol) [0x00007FF7F3BFD320]\nE       \t(No symbol) [0x00007FF7F3C1CA80]\nE       \t(No symbol) [0x00007FF7F3BFCEB3]\nE       \t(No symbol) [0x00007FF7F3BCA46B]\nE       \t(No symbol) [0x00007FF7F3BCB001]\nE       \tGetHandleVerifier [0x00007FF7F4059FFD+3202381]\nE       \tGetHandleVerifier [0x00007FF7F40A6A1D+3516269]\nE       \tGetHandleVerifier [0x00007FF7F409C490+3473888]\nE       \tGetHandleVerifier [0x00007FF7F3E05D36+760454]\nE       \t(No symbol) [0x00007FF7F3CD6B3F]\nE       \t(No symbol) [0x00007FF7F3CD1CD4]\nE       \t(No symbol) [0x00007FF7F3CD1E62]\nE       \t(No symbol) [0x00007FF7F3CC120F]\nE       \tBaseThreadInitThunk [0x00007FFB806E7344+20]\nE       \tRtlUserThreadStart [0x00007FFB80E5CC91+33]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "start": 1718973328005, "stop": 1718973342329, "uuid": "2b1852e3-3cd5-4da4-b9e4-4135d052c794", "historyId": "57628c63a797acce12b3c80dac08fa49", "testCaseId": "57628c63a797acce12b3c80dac08fa49", "fullName": "tests.test_18_social_media.TestSocialMedia#test_social_media_update_and_remove", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_18_social_media"}, {"name": "subSuite", "value": "TestSocialMedia"}, {"name": "host", "value": "Ercan"}, {"name": "thread", "value": "9960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_18_social_media"}]}