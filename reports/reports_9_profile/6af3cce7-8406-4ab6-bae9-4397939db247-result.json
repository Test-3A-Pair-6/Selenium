{"name": "test_switch_off_frame", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\n  (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n0   chromedriver                        0x0000000101006a80 chromedriver + 4385408\n1   chromedriver                        0x0000000100fff38c chromedriver + 4354956\n2   chromedriver                        0x0000000100c1cb0c chromedriver + 281356\n3   chromedriver                        0x0000000100c20fd8 chromedriver + 298968\n4   chromedriver                        0x0000000100c22e58 chromedriver + 306776\n5   chromedriver                        0x0000000100c22ed0 chromedriver + 306896\n6   chromedriver                        0x0000000100c5f114 chromedriver + 553236\n7   chromedriver                        0x0000000100c97d24 chromedriver + 785700\n8   chromedriver                        0x0000000100c53eec chromedriver + 507628\n9   chromedriver                        0x0000000100c548c4 chromedriver + 510148\n10  chromedriver                        0x0000000100fce43c chromedriver + 4154428\n11  chromedriver                        0x0000000100fd2ea0 chromedriver + 4173472\n12  chromedriver                        0x0000000100fb3ff8 chromedriver + 4046840\n13  chromedriver                        0x0000000100fd378c chromedriver + 4175756\n14  chromedriver                        0x0000000100fa6fb8 chromedriver + 3993528\n15  chromedriver                        0x0000000100ff121c chromedriver + 4297244\n16  chromedriver                        0x0000000100ff1398 chromedriver + 4297624\n17  chromedriver                        0x0000000100ffef84 chromedriver + 4353924\n18  libsystem_pthread.dylib             0x0000000199e86f94 _pthread_start + 136\n19  libsystem_pthread.dylib             0x0000000199e81d34 thread_start + 8", "trace": "self = <test_9_profile.TestProfile object at 0x10660d8b0>\n\n    def test_switch_off_frame(self):\n        self.navigating_to_evaluation_modul()\n>       self.page.find_iframe_itself()\n\ntest_9_profile.py:273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/page_9_profile.py:95: in find_iframe_itself\n    self.iframe_itself = Driver.wait(self.driver, By.ID, '//*[@id=\"exw-launcher-frame-body\"]/div/div/div/div[1]/div[2]/button/svg', \"click\", 5)\n../utils/Driver.py:16: in wait\n    return WebDriverWait(driver, timeout).until(ec.element_to_be_clickable((selector, element)))\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1065c6720>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...000199e86f94 _pthread_start + 136\\\\n19  libsystem_pthread.dylib             0x0000000199e81d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\nE         (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       0   chromedriver                        0x0000000101006a80 chromedriver + 4385408\nE       1   chromedriver                        0x0000000100fff38c chromedriver + 4354956\nE       2   chromedriver                        0x0000000100c1cb0c chromedriver + 281356\nE       3   chromedriver                        0x0000000100c20fd8 chromedriver + 298968\nE       4   chromedriver                        0x0000000100c22e58 chromedriver + 306776\nE       5   chromedriver                        0x0000000100c22ed0 chromedriver + 306896\nE       6   chromedriver                        0x0000000100c5f114 chromedriver + 553236\nE       7   chromedriver                        0x0000000100c97d24 chromedriver + 785700\nE       8   chromedriver                        0x0000000100c53eec chromedriver + 507628\nE       9   chromedriver                        0x0000000100c548c4 chromedriver + 510148\nE       10  chromedriver                        0x0000000100fce43c chromedriver + 4154428\nE       11  chromedriver                        0x0000000100fd2ea0 chromedriver + 4173472\nE       12  chromedriver                        0x0000000100fb3ff8 chromedriver + 4046840\nE       13  chromedriver                        0x0000000100fd378c chromedriver + 4175756\nE       14  chromedriver                        0x0000000100fa6fb8 chromedriver + 3993528\nE       15  chromedriver                        0x0000000100ff121c chromedriver + 4297244\nE       16  chromedriver                        0x0000000100ff1398 chromedriver + 4297624\nE       17  chromedriver                        0x0000000100ffef84 chromedriver + 4353924\nE       18  libsystem_pthread.dylib             0x0000000199e86f94 _pthread_start + 136\nE       19  libsystem_pthread.dylib             0x0000000199e81d34 thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidSelectorException"}, "attachments": [{"name": "stdout", "source": "9b664900-3cbf-4ec9-b2c6-ac41ed70b219-attachment.txt", "type": "text/plain"}], "start": 1720001785734, "stop": 1720001815089, "uuid": "95885a20-3f21-4792-a473-a7fd9855f89e", "historyId": "bde917d7bdf31472c4be71c8cd1803f9", "testCaseId": "bde917d7bdf31472c4be71c8cd1803f9", "fullName": "tests.test_9_profile.TestProfile#test_switch_off_frame", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_9_profile"}, {"name": "subSuite", "value": "TestProfile"}, {"name": "host", "value": "Ismets-Air.home"}, {"name": "thread", "value": "67916-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_9_profile"}]}