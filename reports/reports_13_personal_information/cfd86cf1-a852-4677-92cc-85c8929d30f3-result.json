{"name": "test_personal_information", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (390, 1310)\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7F242EEA2+31554]\n\t(No symbol) [0x00007FF7F23A7ED9]\n\t(No symbol) [0x00007FF7F226872A]\n\t(No symbol) [0x00007FF7F22C012E]\n\t(No symbol) [0x00007FF7F22BDAF2]\n\t(No symbol) [0x00007FF7F22BAF8B]\n\t(No symbol) [0x00007FF7F22BA156]\n\t(No symbol) [0x00007FF7F22AC151]\n\t(No symbol) [0x00007FF7F22DD02A]\n\t(No symbol) [0x00007FF7F22ABA76]\n\t(No symbol) [0x00007FF7F22DD240]\n\t(No symbol) [0x00007FF7F22FC977]\n\t(No symbol) [0x00007FF7F22DCDD3]\n\t(No symbol) [0x00007FF7F22AA33B]\n\t(No symbol) [0x00007FF7F22AAED1]\n\tGetHandleVerifier [0x00007FF7F2738B1D+3217341]\n\tGetHandleVerifier [0x00007FF7F2785AE3+3532675]\n\tGetHandleVerifier [0x00007FF7F277B0E0+3489152]\n\tGetHandleVerifier [0x00007FF7F24DE776+750614]\n\t(No symbol) [0x00007FF7F23B375F]\n\t(No symbol) [0x00007FF7F23AEB14]\n\t(No symbol) [0x00007FF7F23AECA2]\n\t(No symbol) [0x00007FF7F239E16F]\n\tBaseThreadInitThunk [0x00007FF83D13257D+29]\n\tRtlUserThreadStart [0x00007FF83E10AF28+40]", "trace": "self = <test_13_personal_information.TestPersonalInformation object at 0x00000269623D5EB0>\n\n    def test_personal_information(self):\n        self.login()\n        WebDriverWait(self.driver, 20).until(EC.url_changes(const.loginURL))\n        self.driver.execute_script(\"window.scrollTo(0, 500);\")\n>       self.page.profile_title_control()\n\ntest_13_personal_information.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\page_13_personal_informaiton.py:30: in profile_title_control\n    self.driver.find_element(By.XPATH, \"//div[@class='details pack-bg-2']/button[@class='btn btn-primary w-100 ']\").click()\n..\\..\\pomTestCases\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\pomTestCases\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\pomTestCases\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026962A335C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7F239E16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF83D13257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF83E10AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (390, 1310)\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7F242EEA2+31554]\nE       \t(No symbol) [0x00007FF7F23A7ED9]\nE       \t(No symbol) [0x00007FF7F226872A]\nE       \t(No symbol) [0x00007FF7F22C012E]\nE       \t(No symbol) [0x00007FF7F22BDAF2]\nE       \t(No symbol) [0x00007FF7F22BAF8B]\nE       \t(No symbol) [0x00007FF7F22BA156]\nE       \t(No symbol) [0x00007FF7F22AC151]\nE       \t(No symbol) [0x00007FF7F22DD02A]\nE       \t(No symbol) [0x00007FF7F22ABA76]\nE       \t(No symbol) [0x00007FF7F22DD240]\nE       \t(No symbol) [0x00007FF7F22FC977]\nE       \t(No symbol) [0x00007FF7F22DCDD3]\nE       \t(No symbol) [0x00007FF7F22AA33B]\nE       \t(No symbol) [0x00007FF7F22AAED1]\nE       \tGetHandleVerifier [0x00007FF7F2738B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF7F2785AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF7F277B0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF7F24DE776+750614]\nE       \t(No symbol) [0x00007FF7F23B375F]\nE       \t(No symbol) [0x00007FF7F23AEB14]\nE       \t(No symbol) [0x00007FF7F23AECA2]\nE       \t(No symbol) [0x00007FF7F239E16F]\nE       \tBaseThreadInitThunk [0x00007FF83D13257D+29]\nE       \tRtlUserThreadStart [0x00007FF83E10AF28+40]\n\n..\\..\\pomTestCases\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1720127670147, "stop": 1720127698709, "uuid": "ed7349d1-4b45-4f79-9e31-175bbeb9951e", "historyId": "c17100ffd783243c2f126b25083ef444", "testCaseId": "c17100ffd783243c2f126b25083ef444", "fullName": "tests.test_13_personal_information.TestPersonalInformation#test_personal_information", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_13_personal_information"}, {"name": "subSuite", "value": "TestPersonalInformation"}, {"name": "host", "value": "Ã¶mer"}, {"name": "thread", "value": "17136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_13_personal_information"}]}