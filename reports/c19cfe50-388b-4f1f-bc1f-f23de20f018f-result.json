{"name": "test_delete_certificate", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1205, 838)\n  (Session info: chrome=125.0.6422.176)\nStacktrace:\n\tGetHandleVerifier [0x00007FF76FC91F52+60322]\n\t(No symbol) [0x00007FF76FC0CEC9]\n\t(No symbol) [0x00007FF76FAC7EBA]\n\t(No symbol) [0x00007FF76FB1F32E]\n\t(No symbol) [0x00007FF76FB1CCF2]\n\t(No symbol) [0x00007FF76FB1A18B]\n\t(No symbol) [0x00007FF76FB19356]\n\t(No symbol) [0x00007FF76FB0B491]\n\t(No symbol) [0x00007FF76FB3C21A]\n\t(No symbol) [0x00007FF76FB0ADB6]\n\t(No symbol) [0x00007FF76FB3C430]\n\t(No symbol) [0x00007FF76FB5BC80]\n\t(No symbol) [0x00007FF76FB3BFC3]\n\t(No symbol) [0x00007FF76FB09617]\n\t(No symbol) [0x00007FF76FB0A211]\n\tGetHandleVerifier [0x00007FF76FFA94AD+3301629]\n\tGetHandleVerifier [0x00007FF76FFF36D3+3605283]\n\tGetHandleVerifier [0x00007FF76FFE9450+3563680]\n\tGetHandleVerifier [0x00007FF76FD44326+790390]\n\t(No symbol) [0x00007FF76FC1750F]\n\t(No symbol) [0x00007FF76FC13404]\n\t(No symbol) [0x00007FF76FC13592]\n\t(No symbol) [0x00007FF76FC02F9F]\n\tBaseThreadInitThunk [0x00007FFC12F6257D+29]\n\tRtlUserThreadStart [0x00007FFC1436AF28+40]", "trace": "self = <test_certificate_crud.TestCertificateCRUD object at 0x0000020913C4C2C0>\n\n    def test_delete_certificate(self):\n        self.page.login(const.valid_user_name, const.valid_password)\n    \n        WebDriverWait(self.driver, 20).until(EC.url_changes(const.loginURL))\n        self.page.navigate_to_certificates(const.certificatesURL)\n        WebDriverWait(self.driver, 20).until(EC.url_contains(\"sertifikalarim\"))\n    \n>       self.page.delete_certificate()\n\ntests\\test_certificate_crud.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\page_certificate_crud.py:86: in delete_certificate\n    delete_button.click()\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000209130B63F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF76FC02F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC12F6257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC1436AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1205, 838)\nE         (Session info: chrome=125.0.6422.176)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF76FC91F52+60322]\nE       \t(No symbol) [0x00007FF76FC0CEC9]\nE       \t(No symbol) [0x00007FF76FAC7EBA]\nE       \t(No symbol) [0x00007FF76FB1F32E]\nE       \t(No symbol) [0x00007FF76FB1CCF2]\nE       \t(No symbol) [0x00007FF76FB1A18B]\nE       \t(No symbol) [0x00007FF76FB19356]\nE       \t(No symbol) [0x00007FF76FB0B491]\nE       \t(No symbol) [0x00007FF76FB3C21A]\nE       \t(No symbol) [0x00007FF76FB0ADB6]\nE       \t(No symbol) [0x00007FF76FB3C430]\nE       \t(No symbol) [0x00007FF76FB5BC80]\nE       \t(No symbol) [0x00007FF76FB3BFC3]\nE       \t(No symbol) [0x00007FF76FB09617]\nE       \t(No symbol) [0x00007FF76FB0A211]\nE       \tGetHandleVerifier [0x00007FF76FFA94AD+3301629]\nE       \tGetHandleVerifier [0x00007FF76FFF36D3+3605283]\nE       \tGetHandleVerifier [0x00007FF76FFE9450+3563680]\nE       \tGetHandleVerifier [0x00007FF76FD44326+790390]\nE       \t(No symbol) [0x00007FF76FC1750F]\nE       \t(No symbol) [0x00007FF76FC13404]\nE       \t(No symbol) [0x00007FF76FC13592]\nE       \t(No symbol) [0x00007FF76FC02F9F]\nE       \tBaseThreadInitThunk [0x00007FFC12F6257D+29]\nE       \tRtlUserThreadStart [0x00007FFC1436AF28+40]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1718451105477, "stop": 1718451128450, "uuid": "ea9e669a-7883-49d1-96ef-3772b48735e4", "historyId": "03f139aab80c9b6083b20ddeec3a1190", "testCaseId": "03f139aab80c9b6083b20ddeec3a1190", "fullName": "tests.test_certificate_crud.TestCertificateCRUD#test_delete_certificate", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_certificate_crud"}, {"name": "subSuite", "value": "TestCertificateCRUD"}, {"name": "host", "value": "chiturca"}, {"name": "thread", "value": "20368-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_certificate_crud"}]}